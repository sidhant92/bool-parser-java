import java.time.LocalDateTime

apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: "io.github.gradle-nexus.publish-plugin"

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "io.github.gradle-nexus:publish-plugin:1.1.0"
        classpath "com.dipien:semantic-version-gradle-plugin:1.4.1"
    }
}


sourceCompatibility = 1.8
targetCompatibility = 1.8

group 'com.github.sidhant92'
version = "1.0.0"

apply plugin: "com.dipien.semantic-version"

repositories {
    mavenCentral()
}

dependencies {
    testImplementation group: 'junit', name: 'junit', version: '4.12'

    implementation 'ch.qos.logback:logback-classic:1.2.3'
    implementation 'ch.qos.logback.contrib:logback-json-classic:0.1.5'
    implementation 'ch.qos.logback.contrib:logback-jackson:0.1.5'
    implementation 'net.logstash.logback:logstash-logback-encoder:5.2'
    implementation 'org.apache.maven:maven-artifact:3.5.2'
    implementation 'org.antlr:antlr4-runtime:4.11.1'
    implementation 'io.vavr:vavr:0.10.4'
    testImplementation 'org.openjdk.jmh:jmh-core:1.35'
    testImplementation 'org.openjdk.jmh:jmh-generator-annprocess:1.35'

    implementation 'org.projectlombok:lombok:1.18.26'
    annotationProcessor 'org.projectlombok:lombok:1.18.26'
    testAnnotationProcessor 'org.openjdk.jmh:jmh-generator-annprocess:1.36'

    testImplementation 'org.openjdk.jmh:jmh-core:1.35'
    testImplementation 'org.openjdk.jmh:jmh-generator-annprocess:1.35'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.4.2'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: '5.4.2'
    testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: '3.3.3'
    testImplementation group: 'org.mock-server', name: 'mockserver-junit-jupiter', version: '5.10.0'
}

test {
    testLogging {
        events "passed", "skipped", "failed"
    }
    useJUnitPlatform()
    reports {
        junitXml.enabled = true
        html.enabled = false
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

artifacts {
    archives javadocJar, sourcesJar
}

/*signing {
    sign configurations.archives
}*/

signing {
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from(components.java)
            pom {
                name = 'bool-parser'
                description = 'Java parser for boolean expressions'
                url = 'https://github.com/sidhant92/bool-parser'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'sidhant92'
                        name = 'Sidhant Aggarwal'
                    }
                }
                scm {
                    url = 'https://github.com/sidhant92/bool-parser'
                    connection = 'scm:git://github.com/sidhant92/bool-parser.git'
                    developerConnection = 'scm:git://github.com/sidhant92/bool-parser.git'
                }
            }
        }
    }
}

nexusPublishing {
    repositories {
        sonatype()
    }
}

ext.genOutputDir = file("$buildDir/generated-resources")

task generateVersionTxt()  {
    ext.outputFile = file("$genOutputDir/version.txt")
    outputs.file(outputFile)
    doLast {
        outputFile.text = """GroupId: ${project.group}
Name: ${project.name}
Version: $version
Build-time: ${LocalDateTime.now()}
"""
    }
}

sourceSets.main.output.dir genOutputDir, builtBy: generateVersionTxt
