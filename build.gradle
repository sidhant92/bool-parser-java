import java.time.LocalDateTime

plugins {
    id 'java'
    id 'maven-publish'
    id 'signing'
    id 'com.gradleup.nmcp' version '0.0.8'
}

group 'com.github.sidhant92'
version = "2.0.0"

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
    withJavadocJar()
    withSourcesJar()
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.apache.maven:maven-artifact:3.5.2'
    implementation 'org.antlr:antlr4-runtime:4.13.2'
    implementation 'io.vavr:vavr:0.10.4'
    implementation 'com.github.ben-manes.caffeine:caffeine:2.9.3'
    implementation 'org.projectlombok:lombok:1.18.34'

    annotationProcessor 'org.projectlombok:lombok:1.18.34'
    testAnnotationProcessor 'org.openjdk.jmh:jmh-generator-annprocess:1.36'

    testImplementation 'org.openjdk.jmh:jmh-core:1.35'
    testImplementation 'org.openjdk.jmh:jmh-generator-annprocess:1.35'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.4.2'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: '5.4.2'
    testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: '3.3.3'
    testImplementation group: 'org.mock-server', name: 'mockserver-junit-jupiter', version: '5.10.0'
    testImplementation group: 'junit', name: 'junit', version: '4.12'
}

test {
    testLogging {
        events "passed", "skipped", "failed"
    }
    useJUnitPlatform()
    reports {
        junitXml.required = true
        html.required = false
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            
            pom {
                name = 'bool-parser'
                description = 'Java parser for boolean expressions'
                url = 'https://github.com/sidhant92/bool-parser-java'
                
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                
                developers {
                    developer {
                        id = 'sidhant92'
                        name = 'Sidhant Aggarwal'
                        url = 'https://github.com/sidhant92'
                    }
                }
                
                scm {
                    connection = 'scm:git:git://github.com/sidhant92/bool-parser-java.git'
                    developerConnection = 'scm:git:ssh://git@github.com/sidhant92/bool-parser-java.git'
                    url = 'https://github.com/sidhant92/bool-parser-java'
                }
            }
        }
    }
    
    // Remove the old repository configuration - NMCP plugin handles this
}

// Configure signing - only required for Maven Central, not for local publishing  
signing {
    def signingKey = System.getenv("signingInMemoryKey") ?: findProperty("signingInMemoryKey")
    def signingPassword = System.getenv("signingInMemoryKeyPassword") ?: findProperty("signingInMemoryKeyPassword")
    
    // Only enable signing if keys are provided
    required { signingKey != null && signingPassword != null }
    
    if (signingKey && signingPassword) {
        useInMemoryPgpKeys(signingKey as String, signingPassword as String)
        sign publishing.publications
    }
}

// Configure New Maven Central Portal publishing
nmcp {
    publishAllPublications {
        username = System.getenv("MAVEN_USERNAME") ?: findProperty("mavenCentralUsername")
        password = System.getenv("MAVEN_PASSWORD") ?: findProperty("mavenCentralPassword")
        publicationType = "AUTOMATIC"
    }
}

ext.genOutputDir = file("${layout.buildDirectory.get()}/generated-resources")

tasks.register('generateVersionTxt') {
    ext.outputFile = file("$genOutputDir/version.txt")
    outputs.file(outputFile)
    doLast {
        outputFile.text = """GroupId: ${project.group}
Name: ${project.name}
Version: $version
Build-time: ${LocalDateTime.now()}
"""
    }
}

sourceSets.main.output.dir genOutputDir, builtBy: generateVersionTxt
